(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'<gluon.validators.IS_MATCH object at 0xae6b968c>)\' at line 1")'
p3
sS'layer'
p4
S'/home/brat/web2py/applications/Spencers/models/db.py'
p5
sS'code'
p6
S'#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\nfrom gluon.dal import MySQLAdapter\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\nMySQLAdapter.driver = globals().get(\'MySQLdb\',None)\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL("mysql://root:1234@localhost/phase5",pool_size=3,migrate=True)\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename=\'private/janrain.key\')\n\n\nimport uuid\nuser_id = auth.user.id if auth.user else 0\nunique_id = Field(\'unique_id\',\'boolean\',default=uuid.uuid4(),writable=False,readable=False)\nactive = Field(\'active\',\'boolean\',default=True,writable=False)\ncreated_by = Field(\'created_by\',db.auth_user,default=user_id,writable=False)\ncreated_on = Field(\'created_on\',\'datetime\',default=request.now,writable=False) \nmodified_by = Field(\'modified_by\',db.auth_user,default=user_id,update=user_id,writable=False)\nmodified_on = Field(\'modified_on\',\'datetime\',default=request.now,update=request.now,writable=False)\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\ndb.define_table(\'DEALERS\',\n                Field(\'dealer_name\',\'string\',IS_MATCH(\'^[a-z]\',error_message=\'Not a valid Indian Mobile Number\')),\n                Field(\'office_add\',\'text\'),\n                Field(\'ship_add\',\'text\'),\n                Field(\'mobile\',requires = IS_MATCH(\'^\\d{10}\',error_message=\'Not a valid Indian Mobile Number\')),\n                Field(\'email\',requires = IS_EMAIL(error_message=\'invalid email!\')),\n               \n                format=\'%(dealer_name)s\'\n                )\n\n\ndb.define_table(\'PRODUCTS\',\n                Field(\'item_name\',\'string\'),\n                Field(\'mrp\',\'integer\',notnull=True,requires = IS_MATCH(\'^\\d{10}\',error_message=\'Not a valid Amount\')),\n                Field(\'discount\',\'integer\'),\n                Field(\'dealer\',\'reference DEALERS\'),                \n                format=\'%(item_name)s\')\n\n\ndb.define_table(\'CUSTOMERS\',\n                Field(\'cust_name\',\'string\'),\n                Field(\'address\',\'text\'),\n                Field(\'mobile\',requires = IS_MATCH(\'^\\d{10}\',error_message=\'Not a valid Indian Mobile Number\')),\n                Field(\'email\',requires = IS_EMAIL(error_message=\'invalid email!\')),                \n                format=\'%(cust_name)s\')\n\n\n\ndb.define_table(\'FBACK\',\n                Field(\'name\',\'string\'),\n                Field(\'email\',requires=IS_EMAIL(error_message=\'invalid email!\')),\n                Field(\'Feedback\',\'text\'))\n\ndb.define_table(\'BILLS\',\n                Field(\'customer\',\'reference CUSTOMERS\'),\n                Field(\'total\',\'integer\',default=0,readable=False,writable=False),\n                Field(\'net_total\',\'integer\',readable=False,writable=False)\n                )\n\ndb.define_table(\'BILLITEMS\',\n                Field(\'bill\',\'reference BILLS\',readable=False,writable=False),\n                Field(\'product\',\'reference PRODUCTS\'),\n                Field(\'quantity\',\'integer\'))\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/brat/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/brat/web2py/applications/Spencers/models/db.py", line 94, in <module>\n    format=\'%(dealer_name)s\'\n  File "/home/brat/web2py/gluon/dal.py", line 7881, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/brat/web2py/gluon/dal.py", line 7918, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/brat/web2py/gluon/dal.py", line 1024, in create_table\n    fake_migrate=fake_migrate)\n  File "/home/brat/web2py/gluon/dal.py", line 1131, in migrate_table\n    self.execute(sub_query)\n  File "/home/brat/web2py/gluon/dal.py", line 1828, in execute\n    return self.log_execute(*a, **b)\n  File "/home/brat/web2py/gluon/dal.py", line 1822, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.4b4-py2.7-linux-i686.egg/MySQLdb/cursors.py", line 202, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.4b4-py2.7-linux-i686.egg/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'<gluon.validators.IS_MATCH object at 0xae6b968c>)\' at line 1")\n'
p11
s.