(dp1
S'output'
p2
S'<class \'_mysql_exceptions.OperationalError\'> (1054, "Unknown column \'name\' in \'where clause\'")'
p3
sS'layer'
p4
S'/home/brat/web2py/applications/Intro2DB/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    if auth.is_logged_in():\n        redirect(URL(\'onepage\'))\n    redirect(URL(\'user\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n@auth.requires_login() \ndef onepage():\n    dealers=db(db.DEALERS).select(orderby=db.DEALERS.dealer_name)\n    products=db(db.PRODUCTS).select(orderby=db.PRODUCTS.item_name)\n    customers=db(db.CUSTOMERS).select(orderby=db.CUSTOMERS.cust_name)\n    return locals()\n@auth.requires_login() \ndef customers():    \n    return locals()\n\ndef view_one_dealer():\n    dealer=db.DEALERS(request.args(0))\n    return locals()\ndef email_invoice():\n    bill=db.BILLS(request.args(0))\n    context = dict(bill=bill)\n    message = response.render(\'invoice.html\', context)\n    x=mail.send(\'the.budhiraja@gmail.com\',\'Spencer\\\'s Bill {{=bill.id}} \',message=message)\n    if x:\n        redirect(URL(\'view_customers\'))\n    else:\n        redirect(URL(\'bills\'))\n    \n@auth.requires_login() \ndef products():\n    return locals()\n\ndef add_invoice():\n    new_invoice=crud.create(db.BILLS,next=\'add_item_to_bill/[id]\')\n    return locals()\n\ndef calc_bill():\n    bill=db.BILLS(request.args(0))    \n    total=0\n    billitems=db.BILLITEMS.bill==request.args(0)\n    billitems=db(billitems)\n    billitems=billitems.select()\n    for i in billitems:\n        total+=(i.product.mrp* ( 100 - i.product.discount) / 100 * i.quantity)\n    net_total=total * 11/100 + total\n    bill.update_record(total=total,net_total=net_total)\n    redirect(URL(\'show_bill\',args=bill.id))\n\ndef bills():\n    bills=db(db.BILLS).select(orderby=db.BILLS.id)\n    return locals()\n\ndef show_bill():\n    bill=db.BILLS(request.args(0))\n    billitems=db.BILLITEMS.bill==request.args(0)\n    billitems=db(billitems)\n    billitems=billitems.select()\n    return locals()\n\ndef add_item_to_bill():\n    billid=request.args(0)\n    db.BILLITEMS.bill.default=request.args(0)\n    new_billitem=crud.create(db.BILLITEMS,next=URL(\'add_item_to_bill\',args=billid))\n    return locals()\n\n\n@auth.requires_login() \ndef dealers():\n    return locals()\n\n@auth.requires_login() \ndef view_customersx():\n    form1 = SQLFORM.factory(\n        Field(\'Customers\',requires=IS_IN_DB(db, \'CUSTOMERS.id\', \'%(cust_name)s\')))\n    if form1.process(formname="form_one").accepted:\n        redirect(URL(\'view_one_customer\', args=(form1.vars.abc)))\n    customers=db(db.CUSTOMERS).select(orderby=db.CUSTOMERS.cust_name)\n    customers=list(customers)\n    form2 = SQLFORM.factory(\n        Field(\'customer_name\',requires=IS_NOT_EMPTY()))\n    if form2.process(formname="form_two").accepted:\n        for i in customers:\n            if form2.vars.customer_name==i.cust_name:\n             response.flash = \'Customer Found.\'\n            redirect(URL(\'view_one_customer\',args=i.id))\n        session.flash = \'Customer Not Found.Try Again.\'\n        redirect(URL(\'view_customers\'))\n    elif form2.errors:\n        response.flash = \'Customer Not Found.Try Again.\'\n    elif form2.errors:\n         response.flash = \'Sorry.Please,Try Again\'\n    return locals()\n\n\ndef view_customers():\n    form1 = SQLFORM.factory(\n        Field(\'Customers\',requires=IS_IN_DB(db, \'CUSTOMERS.id\', \'%(cust_name)s\')))\n    if form1.process(formname="form_one").accepted:\n        redirect(URL(\'view_one_customer\', args=(form1.vars.customers)))\n    customers=db(db.CUSTOMERS).select(orderby=db.CUSTOMERS.cust_name)\n    customers=list(customers)\n    form2 = SQLFORM.factory(\n        Field(\'customer_name\',requires=IS_NOT_EMPTY()))\n    if form2.process(formname="form_two").accepted:\n        redirect(URL(\'searched_customers\', args=(form2.vars.customer_name)))\n    elif form2.errors:\n        response.flash = \'Customer Not Found.Try Again.\'\n    elif form2.errors:\n         response.flash = \'Sorry.Please,Try Again\'\n    return locals()\n\n\n\ndef searched_customers():\n    #customers=list(customers)\n    name=request.args(0)\n    l=name.split(\'_\')\n    name2=""\n    for i in l:\n        name2+=i+\' \'\n    name2=name2[:-1]\n    #customers=db.CUSTOMERS.cust_name\n    #customers=db(customers)\n    #customers=customers.select()\n    customers=db.executesql("SELECT * FROM CUSTOMERS WHERE name LIKE \'%Jared Mills%\'")\n    if len(customers)>0:\n        redirect(URL(\'view_customers\'))\n    return locals()\n\n@auth.requires_login() \ndef add_customer():\n    new_customer = crud.create(db.CUSTOMERS, next=\'view_customers\')\n    return locals()\n\n@auth.requires_login() \ndef view_products():\n    products=db(db.PRODUCTS).select(orderby=db.PRODUCTS.item_name)\n    return locals()\n@auth.requires_login() \ndef add_product():\n    new_product = crud.create(db.PRODUCTS, next=\'view_product/[id]\')\n    return locals()\n\n@auth.requires_login() \ndef view_dealers():\n    dealers=db(db.DEALERS).select(orderby=db.DEALERS.dealer_name)\n    return locals()\n\n@auth.requires_login() \ndef add_dealer():\n    new_dealer = crud.create(db.DEALERS, next=\'view_dealers\')\n    return locals()\ndef view_product():\n    product=db.PRODUCTS(request.args(0))\n    return locals()\n\ndef view_one_customer():\n    bills=db.BILLS.customer==request.args(0)\n    bills=db(bills)\n    bills=bills.select()\n    customer_total=0\n    for i in bills:\n        if i.net_total!=None:\n            customer_total+=i.net_total\n    customer=db.CUSTOMERS(request.args(0))\n    return locals()\n    \ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\ndef func():\n    form = SQLFORM.factory(\n        Field(\'abc\',requires=IS_IN_DB(db, \'CUSTOMERS.id\', \'%(cust_name)s\')))\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'view_one_customer\', args=(form.vars.abc)))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form)\n\n\ndef custom_report():\n    bill=db.BILLS(1)\n    billitems=db.BILLITEMS.bill==1\n    billitems=db(billitems)\n    billitems=billitems.select()\n    html = response.render(\'default/invoice.html\', dict(bill=bill,billitems=billitems))\n    #build a report based on static html\n    return plugin_appreport.REPORTPISA(html = html)\n\nresponse._vars=response._caller(searched_customers)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/brat/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/brat/web2py/applications/Intro2DB/controllers/default.py", line 261, in <module>\n  File "/home/brat/web2py/gluon/globals.py", line 378, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/brat/web2py/applications/Intro2DB/controllers/default.py", line 170, in searched_customers\n    customers=db.executesql("SELECT * FROM CUSTOMERS WHERE name LIKE \'%Jared Mills%\'")\n  File "/home/brat/web2py/gluon/dal.py", line 8086, in executesql\n    adapter.execute(query)\n  File "/home/brat/web2py/gluon/dal.py", line 1828, in execute\n    return self.log_execute(*a, **b)\n  File "/home/brat/web2py/gluon/dal.py", line 1822, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.4b4-py2.7-linux-i686.egg/MySQLdb/cursors.py", line 202, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.4b4-py2.7-linux-i686.egg/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1054, "Unknown column \'name\' in \'where clause\'")\n'
p11
s.